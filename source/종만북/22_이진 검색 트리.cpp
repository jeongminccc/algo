//
//  22_이진 검색 트리.cpp
//  algo
//
//  Created by jm on 2020/08/15.
//  Copyright © 2020 jm. All rights reserved.
//

// Search Tree
// 검색 트리는 연결 리스트나 큐처럼 자료들을 담는 컨테이너지만, 자료들을 일정한 순서에 따라 정렬한 상태로 저장해 둔다.
// 이것은 입력이 주어진 순서에 따라 자료들을 배치하는 리스트와 큐와는 다른 속성.
// 예를 들어 32비트 정수들을 크기로 정렬할수도있고, 문자열을 순서대로 정렬하여 저장할 수도 있다.
// - 이미 가입한 사용자들의 주민번호를 저장해 두고, 특정 사용자가 이미 가입되었나 찾기
// - 사용자들의 ID를 사용자 정보로 대응시키는 사전 객체 만들기
// - 모든 학생들의 시험 점수를 저장해 놓고, 나보다 1등 위인 사람과 1등 아래인 사람을 찾기

// Binary search tree
// 이진 검색트리의 구현은 대부분 표준 라이브러리에서 제공하므로, 직접구현은 안해도됨
// 하지만 직접구현해야 할 연산이 필요한경우도 있으므로, 22.6절에서 이진 검색 트리의 변종인 트립의 구현에 대해 다룸.

// 정의 //
// 매번 후보의 개수를 절반씩 줄여갈 수 있으므로 O(lgN)시간에 값을 찾을 수 있다.
// 이진 검색 트리에서 원하는 값을 찾는 과정은 배열에서의 이진 탐색과 비슷하다.

// 순회 //
// 이진 검색 트리를 중위 순회하면 크기 순서로 정렬된 원소의 목록을 얻을 수 있다.
// 중위 순회에서 가장 일찍 출력되는 노드는 맨왼쪽 노드이므로 최소 원소를 갖고, 반대로 마지막 노드는 최대 원소를 갖는다.

// 자료의 검색 //
// 특정 원소가 존재하는지 확인하는 경우에도, 이진 탐색과 비슷한 속도로 검색이 가능하다.

// 조작 //
// 사실 지금까지 소개한 특성은 정렬된 배열에 비해 나을 것이 없다. 최대,최소원소 검색 / 순회 / 이분검색등.
// 이진 검색 트리가 진가를 드러내는 곳은 집합에 원소를 추가하거나 삭제하는 조작 연산을 해야할 때 이다.

// X보다 작은 원소의 수 찾기 / k번째 원소 찾기
// 이진 검색 트리가 주어질 때 주어진 값 X보다 작은 원소가 몇 개 있는지, 크기 순으로 정렬했을 때 앞에서부터 k번째 원소는 무엇인지 찾는 연산이 필요할때가 있음.
// 이와 같은 연산을 이진 검색 트리에서 구현하기란 어렵지 않지만, 이를 표준 라이브러리에서 지원하는 언어는 거의 없으므로,
// 이 경우에는 직접 구현 할 수 밖에 없다 -> 22.6절

// 22.3절 시간 복잡도 분석과 균형 잡힌 이진 검색 트리

